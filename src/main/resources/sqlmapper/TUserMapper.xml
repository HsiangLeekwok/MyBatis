<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.enjoy.mybatis.ch01.mapper.TUserMapper">

    <!-- 手动指定映射关系：项目中最好如此做，以此解耦数据库与 VO 之间的关系 -->
    <resultMap id="UserResultMap" type="TUser">

        <!--
            如果一个 pojo 没有无参构造函数(如线程安全时所有字段都是final，只能通过构造函数传值初始化)，则需要定义 constructor
            idArg: 主键列
            arg: 其他列
         -->
        <!--        <constructor>-->
        <!--            <idArg column="id" javaType="int"/>-->
        <!--            <arg column="user_name" javaType="String"/>-->
        <!--        </constructor>-->

        <!-- id: 唯一标识一条数据；合并数据的时候以此为依据 -->
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="user_name" property="userName" jdbcType="VARCHAR"/>
        <result column="real_name" property="realName" jdbcType="VARCHAR"/>
        <result column="sex" property="sex" jdbcType="TINYINT"/>
        <result column="mobile" property="mobile" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="note" property="note" jdbcType="VARCHAR"/>
        <result column="position_id" property="positionId" jdbcType="INTEGER"/>
    </resultMap>

    <!-- 公共 sql 代码片段，可以提高代码复用 -->
    <sql id="BaseColumns">
        id, user_name, real_name, sex, mobile, email, note, position_id
    </sql>

    <!--confit里设置了别名之后，这里的resultType即可直接写类名而不用写全类名-->
    <select id="selectByPrimaryKey" resultType="TUser" parameterType="java.lang.Integer">
        select
            id,
            user_name ,
            real_name ,
            sex,
            mobile,
            email,
            note,
            position_id
        from t_user
        where id = #{id,jdbcType=INTEGER}
    </select>

    <!-- resultType 和 resultMap 只能选其一 -->
    <select id="selectByPrimaryKey1" resultMap="UserResultMap" parameterType="java.lang.Integer">
        select
        <include refid="BaseColumns"/>
        from t_user
        where id = #{id,jdbcType=INTEGER}
    </select>
    <!--
        参数的传递
        #{}: 预编译代码，可以防止 sql 注入
        ${}: 传值，传入的值直接显示在 sql 中
        PS: 表名和字段可以使用 ${} 传值进行动态设置，order by也可以
    -->
    <select id="selectBySymbol" resultMap="UserResultMap">
        select ${inCol}
        from ${tableName} a
        where a.sex = #{sex}
        order by ${orderStr}
    </select>

    <!-- 使用 map 传值进行多条件查询 -->
    <select id="selectByEmailAndSex1" resultMap="UserResultMap" parameterType="map">
        select
        <include refid="BaseColumns"/>
        from t_user a
        where a.email like CONCAT('%', #{email}, '%') and a.sex = #{sex}
    </select>

    <!-- 使用 @Param 注解传值进行多条件查询 -->
    <select id="selectByEmailAndSex2" resultMap="UserResultMap">
        select
        <include refid="BaseColumns"/>
        from t_user a
        where a.email like CONCAT('%', #{email}, '%') and a.sex = #{sex}
    </select>

    <!-- 使用 自定义类型 传值进行多条件查询 -->
    <select id="selectByEmailAndSex3" resultMap="UserResultMap"
            parameterType="com.enjoy.mybatis.ch01.entity.EmailAndSexBean">
        select
        <include refid="BaseColumns"/>
        from t_user a
        where a.email like CONCAT('%', #{email}, '%') and a.sex = #{sex}
    </select>

    <select id="selectChooseOper" resultMap="UserResultMap">
        select
        <include refid="BaseColumns"/>
        from t_user a
        <where>
            <choose>
                <when test="email !=null and email !=''">
                    and a.email like CONCAT('%', #{email}, '%')
                </when>
                <when test="sex != null">
                    and a.sex = #{sex}
                </when>
                <otherwise>
                    and 1=1
                </otherwise>
            </choose>
        </where>
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from t_user where id = #{id, jdbcType = INTEGER}
    </delete>

    <insert id="insert1" parameterType="TUser" useGeneratedKeys="true" keyProperty="id">
        insert into t_user(
        <include refid="BaseColumns"/>
        )
        values (
        #{id, jdbcType = INTEGER},
        #{userName, jdbcType = VARCHAR},
        #{realName, jdbcType = VARCHAR},
        #{sex, jdbcType = TINYINT},
        #{mobile, jdbcType = VARCHAR},
        #{email, jdbcType = VARCHAR},
        #{note, jdbcType = VARCHAR},
        #{positionId, jdbcType = INTEGER}
        )
    </insert>

    <insert id="insert" parameterType="TUser">
        <!--
            keyProperty: selectKey 语句结果应该被设置的目标属性，多个结果可以用, 分隔开
            order: 可以被设置成 before/after(mysql应该设置为 after，oracle 设置为 before)，如果设置为 before，它会首先选择主键，设置 keyProperty 然后执行插入语句；反之，先执行插入语句，然后 selectKey 元素

            mysql的本质就是这种方式
        -->
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
            -- select SEQ_ID.nextval from dual -- Oracle
        </selectKey>
        insert into t_user(id, user_name, real_name, sex, mobile, email, note, position_id)
        values (
        #{id, jdbcType = INTEGER},
        #{userName, jdbcType = VARCHAR},
        #{realName, jdbcType = VARCHAR},
        #{sex, jdbcType = TINYINT},
        #{mobile, jdbcType = VARCHAR},
        #{email, jdbcType = VARCHAR},
        #{note, jdbcType = VARCHAR},
        #{positionId, jdbcType = INTEGER}
        )
    </insert>

    <!-- 批量添加，需要设置useGeneratedKeys为true才能在commit之后拿到id的值 -->
    <insert id="insertForeach4Batch" useGeneratedKeys="true" keyProperty="id">
        insert into t_user (user_name, real_name, sex, mobile, email, note, position_id)
        values
        <foreach collection="list" separator="," item="user">
            (
            #{user.userName, jdbcType = VARCHAR},
            #{user.realName, jdbcType = VARCHAR},
            #{user.sex, jdbcType = VARCHAR},
            #{user.mobile, jdbcType = VARCHAR},
            #{user.email, jdbcType = VARCHAR},
            #{user.note, jdbcType = VARCHAR},
            #{user.positionId, jdbcType = VARCHAR}
            )
        </foreach>
    </insert>

    <update id="updateIfAndSetOper" parameterType="TUser">
        update t_user
        <set>
            <if test="userName != null">
                user_name = #{userName, jdbcType = VARCHAR},
            </if>
            <if test="realName != null">
                real_name = #{realName, jdbcType = VARCHAR},
            </if>
            <if test="sex != null">
                sex = #{sex, jdbcType = TINYINT},
            </if>
            <if test="mobile != null">
                mobile = #{mobile, jdbcType = VARCHAR},
            </if>
            <if test="email != null">
                email = #{email, jdbcType = VARCHAR},
            </if>
            <if test="note != null">
                note = #{note, jdbcType = VARCHAR},
            </if>
            <if test="positionId != null">
                position_id = #{positionId, jdbcType = INTEGER},
            </if>
        </set>
        where id = #{id, jdbcType = INTEGER}
    </update>
</mapper>